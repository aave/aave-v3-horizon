// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import {Test} from 'forge-std/Test.sol';
import {ATokenInstance, IPool} from 'src/contracts/instances/ATokenInstance.sol';
import {DataTypes} from 'src/contracts/protocol/libraries/types/DataTypes.sol';

contract ATokenRevision_Base is Test {
  uint256 internal _preExecSnapshot;
  uint256 internal _postExecSnapshot;
  IPool internal constant POOL = IPool(0xAe05Cd22df81871bc7cC2a04BeCfb516bFe332C8);

  address internal NEW_A_TOKEN_INSTANCE = 0xB2668573828029917ffbD1e76270373511818498;
  address internal NEW_RWA_A_TOKEN_INSTANCE = 0x8CA2a49c7Df42E67F9A532F0d383D648fB7Fe4C9;
  address internal NEW_REVENUE_SPLITTER = 0x70CC725B8f05e0f230B05C4e91ABc651E121354f;

  function setUp() public {
    vm.createSelectFork('mainnet', 23320695);
    _preExecSnapshot = vm.snapshotState();
    _execPayload();
    _postExecSnapshot = vm.snapshotState();
  }

  function test_exec() public view {
    address[2] memory aTokenInstances = [NEW_A_TOKEN_INSTANCE, NEW_RWA_A_TOKEN_INSTANCE];

    for (uint16 i = 0; i < POOL.getReservesCount(); ++i) {
      ATokenInstance aToken = ATokenInstance(
        POOL.getReserveData(POOL.getReserveAddressById(i)).aTokenAddress
      );
      assertEq(aToken.RESERVE_TREASURY_ADDRESS(), NEW_REVENUE_SPLITTER);

      address aTokenImplementation = _getImplementation(address(aToken));
      assertTrue(
        aTokenImplementation == aTokenInstances[0] || aTokenImplementation == aTokenInstances[1]
      );
    }
  }

  function test_reserveData() public {
    for (uint16 i = 0; i < POOL.getReservesCount(); ++i) {
      address reserve = POOL.getReserveAddressById(i);
      vm.revertToState(_preExecSnapshot);
      DataTypes.ReserveDataLegacy memory rData = POOL.getReserveData(reserve);
      vm.revertToState(_postExecSnapshot);
      assertEq(abi.encode(POOL.getReserveData(reserve)), abi.encode(rData));
    }
  }

  function _getImplementation(address proxy) internal view virtual returns (address) {
    bytes32 slot = bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1);
    return address(uint160(uint256(vm.load(proxy, slot))));
  }

  function _execPayload() internal {
    address EMERGENCY_MULTISIG = 0x13B57382c36BAB566E75C72303622AF29E27e1d3;
    bytes
      memory data = hex'';
    vm.store(EMERGENCY_MULTISIG, bytes32(uint256(4)), bytes32(uint256(1))); // reset signer threshold to one
    address SIGNER = 0xCe5004e7202b5194c53C0Eed784cEf2B96461e0b;
    vm.prank(SIGNER);
    (bool ok, bytes memory ret) = EMERGENCY_MULTISIG.call(data);
    if (!ok) {
      assembly {
        revert(add(ret, 32), mload(ret))
      }
    }
  }
}
